https://download.docker.com/linux/centos/7/x86_64/stable/Packages/



sudo docker run --rm  -it -p 3333:3333 -v ~/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data remnux/metasploit                                         
The --rm option will delete the container after it stops.

The -it options are used to open an interactive session and start a shell on the container for the user.

The -p option will bind port 3333 of the host machine with port 3333 of the docker container (Make sure your iptable rules are set accordingly).

The -v directory will create a shared folder between host and container.

https://github.com/phocean/dockerfile-msf
sudo docker run -it -p 3333:3333 -v ~/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data remnux/metasploit                                         
docker restart msf
docker attach msf
# Later:
docker rm msf

When you need extra terminals besides, use an alias such as:
docker exec -it msf /bin/bash

Keep it up-to-date
The image is built daily from Docker Hub, so for example I use a crontab entry to keep it up-to-date:
*/5 * * * *     root      docker pull phocean/msf


Step 1 â€” Bindmounting a Volume
The following command will create a directory called nginxlogs in your current user's home directory and bindmount it to
/var/log/nginx in the container:
    docker run --name=nginx -d -v ~/nginxlogs:/var/log/nginx -p 5000:80 nginx


root@Sauron:~# echo "rvm install ruby-2.3.3
gem install bundler
yard config --gem-install-yri
" > sn.remnux.metasploit.txt



#
# Postgres /w MSF (KALI WAY)
#
service postgresql start
ss -lntp | grep post
sed -i 's/\(port = \)5433/\15432/' /etc/postgresql/9.6/main/postgresql.conf
service postgresql restart
msfdb reinit


#
# Postgres /w MSF (NON-KALI WAY)
#
Assuming you've gone the non-Kali route, there are a couple extra steps when running Metasploit Framework on Ubuntu if you
want the database capabilities.

First, make sure PostgreSQL is installed

    apt-get install postgresql

Verify that the PostgreSQL service is running:

    service restart postgresql

Make sure you have the appropriate access:

    sudo -s

Change to the built-in postgres user so you have the rights to create a database:

    su postgres

Create a PostgreSQL "msf" database user that Metasploit Framework can use to connect to the database:

createuser msf -P -S -R -D

Remember the password you entered, you'll need it in a moment.

Create an "msf" database to store the information we discover using Metasploit Framework:

createdb -O msf msf
In your Metasploit Framework directory, under ./config/ there is a database.yml file that must be modified.

In the database.yml file specify the following:

adapter: postgresql
database: msf
username: msf
password: <Your database user's password>
Launch the Metasploit Framework console, then use the db_status command to verify that Metasploit Framework Console is
connected to the PostgreSQL database:

msfconsole
b_status






https://metasploit.help.rapid7.com/docs/managing-the-database
$ vim /opt/framework/config/database.yml
cp /opt/framework/config/database.yml /root/.msf4/




msf > db_status
[*] postgresql selected, no connection
msf > db_connect -y /opt/framework/config/database.yml
msf > db_status





db_connect msf3:zIYTU8yvQ7aUUTQbXJt5MsQZxo3tD0ew@127.0.0.1/msf3


msf > db_export -f xml  192.168_scan.xml
msf > db_import 192.168_scan.xml
msf > hosts -c address,os_flavor
msf > hosts -c address,os_flavor -S Linux    # search within our results
msf  auxiliary(tcp) > hosts -c address,os_flavor -S Linux -R
msf  auxiliary(tcp) > hosts -R


POSTGRES
==============
For password less login:

sudo -u user_name psql db_name
To reset the password if you have forgotten:

ALTER USER user_name WITH PASSWORD 'new_password';
ALTER USER username WITH ENCRYPTED PASSWORD 'password';


To change password using Linux command line, use:

sudo -u <user_name> psql -c "ALTER USER <user_name> PASSWORD '<new_password>';"


$ sudo -u postgres psql
Then:

\password postgres
Then to quit psql:

\q
If that does not work, reconfigure authentication.

Edit /etc/postgresql/9.1/main/pg_hba.conf (path will differ) and change:

    local   all             all                                     peer
to:

    local   all             all                                     md5
Then restart the server:

$ sudo service postgresql restart



#
# kalilinux/kali-linux-docker
#
https://www.kali.org/news/official-kali-linux-docker-images/
https://medium.com/@airman604/kali-linux-in-a-docker-container-5a06311624eb
docker pull kalilinux/kali-linux-docker
docker run -ti kalilinux/kali-linux-docker /bin/bash
docker run -it --net=host --hostname kali -v $HOME/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data --name kali kalilinux/kali-linux-docker /bin/bash
https://unix.stackexchange.com/questions/429729/apt-get-update-error-in-kali-linux-after-dist-upgrade
cat << EOF > /etc/apt/source.list
deb http://http.kali.org/kali kali-rolling main contrib non-free
# For source package access, uncomment the following line
# deb-src http://http.kali.org/kali kali-rolling main contrib non-free
EOF

apt update
apt dist-upgrade
apt autoremove
apt clean

apt install man-db
apt install exploitdb



docker ps -a
docker ps
docker commit <CONTAINER ID> my-kali
docker commit 956badea3fca mykali
docker run -ti mykali /bin/bash
sudo docker save -o ~/MyProjects/docker.images/mykali.tar mykali
sudo docker load -i ~/MyProjects/docker.images/mykali.tar    # mkdir /tmp/data


git clone https://github.com/phocean/dockerfile-msf.git
docker pull phocean/msf
docker run --rm -it --net=host --hostname msf -v $HOME/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data --name msf phocean/msf
sudo docker save -o ~/MyProjects/docker.images/phocean.msf.tar phocean/msf
sudo docker load -i ~/MyProjects/docker.images/phocean.msf.tar
# export from another MSF into my new MSF
msf-pro > db_export -f xml -a /home/john/Documents/project.export.xml

